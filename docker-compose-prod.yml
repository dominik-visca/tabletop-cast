services:
  nginx:
    build:
      context: .
      dockerfile: docker/prod/Dockerfile
    volumes:
      - app-storage:/var/www/storage
    environment:
      - DB_CONNECTION=pgsql
      - DB_HOST=pgsql
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - RUN_SEEDER=${RUN_SEEDER:-false}
      - PHP_POST_MAX_SIZE="100M"
      - PHP_UPLOAD_MAX_FILE_SIZE="100M"
    restart: always
    depends_on:
      pgsql:
        condition: service_healthy
    networks:
      - traefik_proxy
      - internal
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.tabletopcast-rtr.entrypoints=https"
      - "traefik.http.routers.tabletopcast-rtr.rule=Host(`tabletopcast.domnek.de`)"
      - "traefik.http.routers.tabletopcast-rtr.tls=true"
      - "traefik.http.routers.tabletopcast-rtr.tls.certresolver=lets-encrypt"
      # Middlewares
      - "traefik.http.routers.tabletopcast-rtr.middlewares=chain-no-auth@file"
      # HTTP Services
      - "traefik.http.routers.tabletopcast-rtr.service=tabletopcast-svc"
      - "traefik.http.services.tabletopcast-svc.loadbalancer.server.port=80"

  pgsql:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      PGUSER: ${DB_USERNAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secret}
    volumes:
      - 'pgsql:/var/lib/postgresql/data'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-q" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - internal

  soketi:
    image: 'quay.io/soketi/soketi:latest-16-alpine'
    environment:
      SOKETI_DEBUG: "0"
    networks:
      - internal
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.soketi-rtr.entrypoints=https"
      - "traefik.http.routers.soketi-rtr.rule=Host(`soketi.domnek.de`)"
      - "traefik.http.routers.soketi-rtr.tls=true"
      - "traefik.http.routers.soketi-rtr.tls.certresolver=lets-encrypt"
      # Middlewares
      - "traefik.http.routers.soketi-rtr.middlewares=chain-no-auth@file"
      # HTTP Services
      - "traefik.http.routers.soketi-rtr.service=soketi-svc"
      - "traefik.http.services.soketi-svc.loadbalancer.server.port=6001"

volumes:
  pgsql:
  app-storage:

networks:
  internal:
    external: false
  traefik_proxy:
    external: true
